groups: []
resources:
- name: infrastructure-repo
  type: git
  source:
    branch: ((github-branch))
    private_key: ((github-private-key))
    uri: ((github-uri))
- name: ci-repo
  type: git
  source:
    uri: https://github.com/cesar-rodriguez/terraform-pipeline.git
- name: commit-status
  type: github-status
  source:
    access_token: ((github-personal-access-token))
    branch: ((github-branch))
    context: concourse-ci
    repository: ((github-org))/((github-repo))
- name: release
  type: github-release
  source:
    access_token: ((github-personal-access-token))
    owner: ((github-org))
    repository: ((github-repo))
- name: version
  type: semver
  source:
    branch: version
    driver: git
    file: version
    initial_version: 0.0.1
    private_key: ((github-private-key))
    uri: ((github-uri))
- name: send-email
  type: email
  source:
    from: ((email-from))
    smtp:
      host: ((smtp-host))
      password: ((smtp-password))
      port: ((smtp-port))
      username: ((smtp-username))
    to:
    - ((email-from))
- name: vault
  type: vault
  source:
    auth_method: AppRole
    role_id: ((vault-role-id))
    secret_id: ((vault-secret-id))
    url: ((vault-address))
resource_types:
- name: vault
  type: docker-image
  source:
    repository: docurated/concourse-vault-resource
    tag: latest
- name: github-status
  type: docker-image
  source:
    repository: dpb587/github-status-resource
    tag: master
- name: email
  type: docker-image
  source:
    repository: pcfseceng/email-resource
jobs:
- name: build
  public: true
  serial_groups:
  - version
  plan:
  - aggregate:
    - get: infrastructure-repo
      trigger: true
    - get: ci-repo
    - get: version
      params:
        pre: rc
    - get: vault
      params:
        paths:
        - ((vault-stage-sts-path))
        - ((vault-prod-sts-path))
  - put: commit-status
    params:
      commit: infrastructure-repo
      state: pending
  - task: get-credentials
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: digitalgenius/alpine-jq-git
          tag: latest
      params:
        DEBUG_MODE: ((debug-mode))
        PIPELINE_AWS_ROLE: ((vault-aws-role-name))
      run:
        path: sh
        args:
        - ci-repo/scripts/ci/get_aws_credentials.sh
        dir: ""
      inputs:
      - name: vault
        path: ""
      - name: ci-repo
        path: ""
      outputs:
      - name: aws-creds
        path: ""
  - aggregate:
    - task: terraform-format
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: hashicorp/terraform
            tag: light
        params:
          DEBUG_MODE: ((debug-mode))
        run:
          path: sh
          args:
          - ci-repo/scripts/ci/terraform_format.sh
          dir: ""
        inputs:
        - name: infrastructure-repo
          path: ""
        - name: ci-repo
          path: ""
    - do:
      - task: terraform-plan
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: hashicorp/terraform
              tag: light
          params:
            BUILD_PIPELINE_NAME: ((github-repo))
            DEBUG_MODE: ((debug-mode))
          run:
            path: sh
            args:
            - ci-repo/scripts/ci/terraform_plan.sh
            dir: ""
          inputs:
          - name: aws-creds
            path: ""
          - name: infrastructure-repo
            path: ""
          - name: ci-repo
            path: ""
          - name: version
            path: ""
          outputs:
          - name: terraform-plan-out
            path: ""
      - task: put-artifacts
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: mesosphere/aws-cli
              tag: latest
          params:
            AWS_PROFILE: ((s3-bucket-profile))
            BUCKET_NAME: ((s3-bucket-name))
            BUILD_PIPELINE_NAME: ((github-repo))
            DEBUG_MODE: ((debug-mode))
          run:
            path: sh
            args:
            - ci-repo/scripts/ci/put_artifacts.sh
            dir: ""
          inputs:
          - name: aws-creds
            path: ""
          - name: ci-repo
            path: ""
          - name: terraform-plan-out
            path: ""
          - name: version
            path: ""
  on_failure:
    put: commit-status
    params:
      commit: infrastructure-repo
      state: failure
- name: test
  public: true
  serial_groups:
  - version
  plan:
  - aggregate:
    - get: infrastructure-repo
      passed:
      - build
      trigger: true
    - get: ci-repo
    - get: version
      params:
        pre: rc
  - task: terrascan
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: python
          tag: 3.6.2
      params:
        DEBUG_MODE: ((debug-mode))
      run:
        path: sh
        args:
        - ci-repo/scripts/ci/terrascan.sh
        dir: ""
      inputs:
      - name: infrastructure-repo
        path: ""
      - name: ci-repo
        path: ""
  on_failure:
    put: commit-status
    params:
      commit: infrastructure-repo
      state: failure
  on_success:
    do:
    - put: commit-status
      params:
        commit: infrastructure-repo
        state: success
    - put: send-email
      params:
        body_text: 'Click here to provision resources: ${ATC_EXTERNAL_URL}/teams/main/pipelines/${BUILD_PIPELINE_NAME}/jobs/provision'
        subject_text: '[concourse-ci] ((github-org))/((github-repo)) build successful:
          ${BUILD_PIPELINE_NAME}/${BUILD_JOB_NAME}/${BUILD_NAME}'
- name: provision
  public: true
  serial_groups:
  - version
  plan:
  - aggregate:
    - get: infrastructure-repo
      passed:
      - test
    - get: ci-repo
    - get: version
      params:
        pre: rc
    - get: vault
      params:
        paths:
        - ((vault-stage-sts-path))
        - ((vault-prod-sts-path))
  - task: get-credentials
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: digitalgenius/alpine-jq-git
          tag: latest
      params:
        DEBUG_MODE: ((debug-mode))
        PIPELINE_AWS_ROLE: ((vault-aws-role-name))
      run:
        path: sh
        args:
        - ci-repo/scripts/ci/get_aws_credentials.sh
        dir: ""
      inputs:
      - name: vault
        path: ""
      - name: ci-repo
        path: ""
      outputs:
      - name: aws-creds
        path: ""
  - task: get-artifacts
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: mesosphere/aws-cli
          tag: latest
      params:
        AWS_PROFILE: ((s3-bucket-profile))
        BUCKET_NAME: ((s3-bucket-name))
        BUILD_PIPELINE_NAME: ((github-repo))
        DEBUG_MODE: ((debug-mode))
      run:
        path: sh
        args:
        - ci-repo/scripts/ci/get_artifacts.sh
        dir: ""
      inputs:
      - name: aws-creds
        path: ""
      - name: ci-repo
        path: ""
      - name: version
        path: ""
      outputs:
      - name: artifacts
        path: ""
  - task: terraform-apply
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: hashicorp/terraform
          tag: light
      params:
        BUILD_PIPELINE_NAME: ((github-repo))
        DEBUG_MODE: ((debug-mode))
      run:
        path: sh
        args:
        - ci-repo/scripts/ci/terraform_apply.sh
        dir: ""
      inputs:
      - name: aws-creds
        path: ""
      - name: infrastructure-repo
        path: ""
      - name: ci-repo
        path: ""
      - name: version
        path: ""
      - name: artifacts
        path: ""
  - put: version
    params:
      bump: final
- name: release
  serial_groups:
  - version
  plan:
  - get: ci-repo
  - get: version
    passed:
    - provision
    trigger: true
  - task: get-version
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
          tag: "3.6"
      params:
        BUILD_PIPELINE_NAME: ((github-repo))
        DEBUG_MODE: ((debug-mode))
      run:
        path: sh
        args:
        - ci-repo/scripts/ci/get_version.sh
        dir: ""
      inputs:
      - name: ci-repo
        path: ""
      - name: version
        path: ""
      outputs:
      - name: release
        path: ""
  - put: release
    params:
      name: release/name
      tag: release/tag
- name: bump-patch
  serial_groups:
  - version
  plan:
  - get: version
    passed:
    - provision
    trigger: true
  - put: version
    params:
      bump: patch
      pre: rc
- name: bump-minor
  serial_groups:
  - version
  plan:
  - put: version
    params:
      bump: minor
- name: bump-major
  serial_groups:
  - version
  plan:
  - put: version
    params:
      bump: major
